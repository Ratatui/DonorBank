//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18010
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DonorBank
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using DonorBank.Web;
    
    
    /// <summary>
    /// Контекст полнофункционального интернет-приложения (RIA).
    /// </summary>
    /// <remarks>
    /// Данный контекст расширяет базовый и делает доступными службы и типы приложений,
    /// которые могут быть использованы в коде и xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализирует новый экземпляр класса WebContext.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает контекст, зарегистрированный как объект времени существования в данном приложении.
        /// </summary>
        /// Исключение <exception cref="InvalidOperationException"> вызывается в том случае, если отсутствует текущее приложение,
        /// не добавлено ни одного контекста либо было добавлено более одного контекста.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Возвращает пользователя, прошедшего проверку подлинности.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace DonorBank.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using DonorBank.Web.Resources;
    
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "AuthenticationService" DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="AuthenticationContext"/>.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("DonorBank-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы AuthenticationService.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="User"/>, загруженных в данный экземпляр <see cref="AuthenticationContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUser".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Login".
        /// </summary>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <param name="password">Значение параметра "password" для запроса.</param>
        /// <param name="isPersistent">Значение параметра "isPersistent" для запроса.</param>
        /// <param name="customData">Значение параметра "customData" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Logout".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "AuthenticationService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUser".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUser".</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Login".
            /// </summary>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="isPersistent">Значение параметра "isPersistent" для данного действия.</param>
            /// <param name="customData">Значение параметра "customData" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogin".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Login".</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Logout".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogout".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogout".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Logout".</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// Класс сущности "Blood".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class Blood : Entity
    {
        
        private EntityRef<Donor> _donor;
        
        private int _id;
        
        private int _idDonor;
        
        private string _purpose;
        
        private DateTime _storageTime;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdDonorChanging(int value);
        partial void OnIdDonorChanged();
        partial void OnPurposeChanging(string value);
        partial void OnPurposeChanged();
        partial void OnStorageTimeChanging(DateTime value);
        partial void OnStorageTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Blood"/>.
        /// </summary>
        public Blood()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает связанную сущность <see cref="Donor"/>.
        /// </summary>
        [Association("Donor_Blood", "IdDonor", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Donor Donor
        {
            get
            {
                if ((this._donor == null))
                {
                    this._donor = new EntityRef<Donor>(this, "Donor", this.FilterDonor);
                }
                return this._donor.Entity;
            }
            set
            {
                Donor previous = this.Donor;
                if ((previous != value))
                {
                    this.ValidateProperty("Donor", value);
                    if ((previous != null))
                    {
                        this._donor.Entity = null;
                        previous.Blood1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdDonor = value.Id;
                    }
                    else
                    {
                        this.IdDonor = default(int);
                    }
                    this._donor.Entity = value;
                    if ((value != null))
                    {
                        value.Blood1.Add(this);
                    }
                    this.RaisePropertyChanged("Donor");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IdDonor".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public int IdDonor
        {
            get
            {
                return this._idDonor;
            }
            set
            {
                if ((this._idDonor != value))
                {
                    this.OnIdDonorChanging(value);
                    this.RaiseDataMemberChanging("IdDonor");
                    this.ValidateProperty("IdDonor", value);
                    this._idDonor = value;
                    this.RaiseDataMemberChanged("IdDonor");
                    this.OnIdDonorChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Purpose".
        /// </summary>
        [DataMember()]
        [Display(Name="Цель", Order=3)]
        [Required()]
        [StringLength(50)]
        public string Purpose
        {
            get
            {
                return this._purpose;
            }
            set
            {
                if ((this._purpose != value))
                {
                    this.OnPurposeChanging(value);
                    this.RaiseDataMemberChanging("Purpose");
                    this.ValidateProperty("Purpose", value);
                    this._purpose = value;
                    this.RaiseDataMemberChanged("Purpose");
                    this.OnPurposeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StorageTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Срок годности до:", Order=2)]
        public DateTime StorageTime
        {
            get
            {
                return this._storageTime;
            }
            set
            {
                if ((this._storageTime != value))
                {
                    this.OnStorageTimeChanging(value);
                    this.RaiseDataMemberChanging("StorageTime");
                    this.ValidateProperty("StorageTime", value);
                    this._storageTime = value;
                    this.RaiseDataMemberChanged("StorageTime");
                    this.OnStorageTimeChanged();
                }
            }
        }
        
        private bool FilterDonor(Donor entity)
        {
            return (entity.Id == this.IdDonor);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "Clinic".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class Clinic : Entity
    {
        
        private string _addres;
        
        private string _director;
        
        private int _id;
        
        private string _phone;
        
        private EntityCollection<RespondBlood> _respondBlood;
        
        private EntityCollection<RespondTransplantant> _respondTransplantant;
        
        private string _title;
        
        private string _username;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAddresChanging(string value);
        partial void OnAddresChanged();
        partial void OnDirectorChanging(string value);
        partial void OnDirectorChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Clinic"/>.
        /// </summary>
        public Clinic()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Addres".
        /// </summary>
        [DataMember()]
        [Display(Name="Адрес", Order=3)]
        [Editable(false, AllowInitialValue=true)]
        [Required()]
        [StringLength(50)]
        public string Addres
        {
            get
            {
                return this._addres;
            }
            set
            {
                if ((this._addres != value))
                {
                    this.OnAddresChanging(value);
                    this.ValidateProperty("Addres", value);
                    this._addres = value;
                    this.RaisePropertyChanged("Addres");
                    this.OnAddresChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Director".
        /// </summary>
        [DataMember()]
        [Display(Name="Главврач", Order=1)]
        [Required()]
        [StringLength(50)]
        public string Director
        {
            get
            {
                return this._director;
            }
            set
            {
                if ((this._director != value))
                {
                    this.OnDirectorChanging(value);
                    this.RaiseDataMemberChanging("Director");
                    this.ValidateProperty("Director", value);
                    this._director = value;
                    this.RaiseDataMemberChanged("Director");
                    this.OnDirectorChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Phone".
        /// </summary>
        [DataMember()]
        [Display(Name="Телефон", Order=2)]
        [StringLength(11)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает коллекцию связанных экземпляров сущности <see cref="RespondBlood"/>.
        /// </summary>
        [Association("Clinic_RespondBlood", "Id", "IdClinic")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<RespondBlood> RespondBlood
        {
            get
            {
                if ((this._respondBlood == null))
                {
                    this._respondBlood = new EntityCollection<RespondBlood>(this, "RespondBlood", this.FilterRespondBlood, this.AttachRespondBlood, this.DetachRespondBlood);
                }
                return this._respondBlood;
            }
        }
        
        /// <summary>
        /// Возвращает коллекцию связанных экземпляров сущности <see cref="RespondTransplantant"/>.
        /// </summary>
        [Association("Clinic_RespondTransplantant", "Id", "IdClinic")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<RespondTransplantant> RespondTransplantant
        {
            get
            {
                if ((this._respondTransplantant == null))
                {
                    this._respondTransplantant = new EntityCollection<RespondTransplantant>(this, "RespondTransplantant", this.FilterRespondTransplantant, this.AttachRespondTransplantant, this.DetachRespondTransplantant);
                }
                return this._respondTransplantant;
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Title".
        /// </summary>
        [DataMember()]
        [Display(Name="Название", Order=0)]
        [Required()]
        [StringLength(50)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Username".
        /// </summary>
        [DataMember()]
        [Display(Name="Пользователь", Order=4)]
        [Editable(false, AllowInitialValue=true)]
        [Required()]
        [StringLength(20)]
        public string Username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUsernameChanging(value);
                    this.ValidateProperty("Username", value);
                    this._username = value;
                    this.RaisePropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        
        private void AttachRespondBlood(RespondBlood entity)
        {
            entity.Clinic = this;
        }
        
        private void DetachRespondBlood(RespondBlood entity)
        {
            entity.Clinic = null;
        }
        
        private bool FilterRespondBlood(RespondBlood entity)
        {
            return (entity.IdClinic == this.Id);
        }
        
        private void AttachRespondTransplantant(RespondTransplantant entity)
        {
            entity.Clinic = this;
        }
        
        private void DetachRespondTransplantant(RespondTransplantant entity)
        {
            entity.Clinic = null;
        }
        
        private bool FilterRespondTransplantant(RespondTransplantant entity)
        {
            return (entity.IdClinic == this.Id);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// Класс сущности "Donor".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class Donor : Entity
    {
        
        private string _addres;
        
        private string _blood;
        
        private EntityCollection<Blood> _blood1;
        
        private Nullable<int> _bloodDonor;
        
        private Nullable<DateTime> _deathTime;
        
        private string _firstName;
        
        private int _id;
        
        private string _lastName;
        
        private string _middleName;
        
        private int _number;
        
        private string _phone;
        
        private string _series;
        
        private EntityCollection<Transplantant> _transplantant;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAddresChanging(string value);
        partial void OnAddresChanged();
        partial void OnBloodChanging(string value);
        partial void OnBloodChanged();
        partial void OnBloodDonorChanging(Nullable<int> value);
        partial void OnBloodDonorChanged();
        partial void OnDeathTimeChanging(Nullable<DateTime> value);
        partial void OnDeathTimeChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnSeriesChanging(string value);
        partial void OnSeriesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Donor"/>.
        /// </summary>
        public Donor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Addres".
        /// </summary>
        [DataMember()]
        [Display(Name="Адрес", Order=7)]
        [StringLength(50)]
        public string Addres
        {
            get
            {
                return this._addres;
            }
            set
            {
                if ((this._addres != value))
                {
                    this.OnAddresChanging(value);
                    this.RaiseDataMemberChanging("Addres");
                    this.ValidateProperty("Addres", value);
                    this._addres = value;
                    this.RaiseDataMemberChanged("Addres");
                    this.OnAddresChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Blood".
        /// </summary>
        [DataMember()]
        [Display(Name="Группа крови", Order=5)]
        [Required()]
        [StringLength(10)]
        public string Blood
        {
            get
            {
                return this._blood;
            }
            set
            {
                if ((this._blood != value))
                {
                    this.OnBloodChanging(value);
                    this.RaiseDataMemberChanging("Blood");
                    this.ValidateProperty("Blood", value);
                    this._blood = value;
                    this.RaiseDataMemberChanged("Blood");
                    this.OnBloodChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает коллекцию связанных экземпляров сущности <see cref="Blood"/>.
        /// </summary>
        [Association("Donor_Blood", "Id", "IdDonor")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<Blood> Blood1
        {
            get
            {
                if ((this._blood1 == null))
                {
                    this._blood1 = new EntityCollection<Blood>(this, "Blood1", this.FilterBlood1, this.AttachBlood1, this.DetachBlood1);
                }
                return this._blood1;
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BloodDonor".
        /// </summary>
        [DataMember()]
        [Display(Name="Кол-во сдачь крови", Order=9)]
        public Nullable<int> BloodDonor
        {
            get
            {
                return this._bloodDonor;
            }
            set
            {
                if ((this._bloodDonor != value))
                {
                    this.OnBloodDonorChanging(value);
                    this.RaiseDataMemberChanging("BloodDonor");
                    this.ValidateProperty("BloodDonor", value);
                    this._bloodDonor = value;
                    this.RaiseDataMemberChanged("BloodDonor");
                    this.OnBloodDonorChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DeathTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Время смерти", Order=6)]
        public Nullable<DateTime> DeathTime
        {
            get
            {
                return this._deathTime;
            }
            set
            {
                if ((this._deathTime != value))
                {
                    this.OnDeathTimeChanging(value);
                    this.RaiseDataMemberChanging("DeathTime");
                    this.ValidateProperty("DeathTime", value);
                    this._deathTime = value;
                    this.RaiseDataMemberChanged("DeathTime");
                    this.OnDeathTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FirstName".
        /// </summary>
        [DataMember()]
        [Display(Name="Имя", Order=2)]
        [Required()]
        [StringLength(15)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LastName".
        /// </summary>
        [DataMember()]
        [Display(Name="Фамилия", Order=3)]
        [Required()]
        [StringLength(15)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "MiddleName".
        /// </summary>
        [DataMember()]
        [Display(Name="Отчество", Order=4)]
        [Required()]
        [StringLength(15)]
        public string MiddleName
        {
            get
            {
                return this._middleName;
            }
            set
            {
                if ((this._middleName != value))
                {
                    this.OnMiddleNameChanging(value);
                    this.RaiseDataMemberChanging("MiddleName");
                    this.ValidateProperty("MiddleName", value);
                    this._middleName = value;
                    this.RaiseDataMemberChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Number".
        /// </summary>
        [DataMember()]
        [Display(Name="Номер паспорта", Order=1)]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Phone".
        /// </summary>
        [DataMember()]
        [Display(Name="Телефон", Order=8)]
        [StringLength(11)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Series".
        /// </summary>
        [DataMember()]
        [Display(Name="Серия", Order=0)]
        [Required()]
        [StringLength(2)]
        public string Series
        {
            get
            {
                return this._series;
            }
            set
            {
                if ((this._series != value))
                {
                    this.OnSeriesChanging(value);
                    this.RaiseDataMemberChanging("Series");
                    this.ValidateProperty("Series", value);
                    this._series = value;
                    this.RaiseDataMemberChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает коллекцию связанных экземпляров сущности <see cref="Transplantant"/>.
        /// </summary>
        [Association("Donor_Transplantant", "Id", "IdDonor")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<Transplantant> Transplantant
        {
            get
            {
                if ((this._transplantant == null))
                {
                    this._transplantant = new EntityCollection<Transplantant>(this, "Transplantant", this.FilterTransplantant, this.AttachTransplantant, this.DetachTransplantant);
                }
                return this._transplantant;
            }
        }
        
        private void AttachBlood1(Blood entity)
        {
            entity.Donor = this;
        }
        
        private void DetachBlood1(Blood entity)
        {
            entity.Donor = null;
        }
        
        private bool FilterBlood1(Blood entity)
        {
            return (entity.IdDonor == this.Id);
        }
        
        private void AttachTransplantant(Transplantant entity)
        {
            entity.Donor = this;
        }
        
        private void DetachTransplantant(Transplantant entity)
        {
            entity.Donor = null;
        }
        
        private bool FilterTransplantant(Transplantant entity)
        {
            return (entity.IdDonor == this.Id);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "DonorBankDomainService" DomainService.
    /// </summary>
    public sealed partial class DonorBankDomainContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public DonorBankDomainContext() : 
                this(new WebDomainClient<IDonorBankDomainServiceContract>(new Uri("DonorBank-Web-DonorBankDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="DonorBankDomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы DonorBankDomainService.</param>
        public DonorBankDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDonorBankDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="DonorBankDomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public DonorBankDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Transplantant"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<Transplantant> Transplantants
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Transplantant>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Blood"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<Blood> Bloods
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Blood>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Clinic"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<Clinic> Clinics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Clinic>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Donor"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<Donor> Donors
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Donor>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="RespondBlood"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<RespondBlood> RespondBloods
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RespondBlood>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="RespondTransplantant"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<RespondTransplantant> RespondTransplantants
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RespondTransplantant>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="TransactionInfo"/>, загруженных в данный экземпляр <see cref="DonorBankDomainContext"/>.
        /// </summary>
        public EntitySet<TransactionInfo> TransactionInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TransactionInfo>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Transplantant"/> с помощью запроса "GetAvalibleTransplantants".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Transplantant"/>.</returns>
        public EntityQuery<Transplantant> GetAvalibleTransplantantsQuery()
        {
            this.ValidateMethod("GetAvalibleTransplantantsQuery", null);
            return base.CreateQuery<Transplantant>("GetAvalibleTransplantants", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Blood"/> с помощью запроса "GetBlood".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Blood"/>.</returns>
        public EntityQuery<Blood> GetBloodQuery()
        {
            this.ValidateMethod("GetBloodQuery", null);
            return base.CreateQuery<Blood>("GetBlood", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Clinic"/> с помощью запроса "GetClinic".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Clinic"/>.</returns>
        public EntityQuery<Clinic> GetClinicQuery()
        {
            this.ValidateMethod("GetClinicQuery", null);
            return base.CreateQuery<Clinic>("GetClinic", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Clinic"/> с помощью запроса "GetClinicByUserName".
        /// </summary>
        /// <param name="UserName">Значение параметра "UserName" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Clinic"/>.</returns>
        public EntityQuery<Clinic> GetClinicByUserNameQuery(string UserName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserName", UserName);
            this.ValidateMethod("GetClinicByUserNameQuery", parameters);
            return base.CreateQuery<Clinic>("GetClinicByUserName", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Donor"/> с помощью запроса "GetDonor".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Donor"/>.</returns>
        public EntityQuery<Donor> GetDonorQuery()
        {
            this.ValidateMethod("GetDonorQuery", null);
            return base.CreateQuery<Donor>("GetDonor", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Donor"/> с помощью запроса "GetDonorByPassport".
        /// </summary>
        /// <param name="Series">Значение параметра "Series" для запроса.</param>
        /// <param name="Number">Значение параметра "Number" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Donor"/>.</returns>
        public EntityQuery<Donor> GetDonorByPassportQuery(string Series, int Number)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Series", Series);
            parameters.Add("Number", Number);
            this.ValidateMethod("GetDonorByPassportQuery", parameters);
            return base.CreateQuery<Donor>("GetDonorByPassport", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RespondBlood"/> с помощью запроса "GetOwnRespondBlood".
        /// </summary>
        /// <param name="ClinicId">Значение параметра "ClinicId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RespondBlood"/>.</returns>
        public EntityQuery<RespondBlood> GetOwnRespondBloodQuery(int ClinicId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ClinicId", ClinicId);
            this.ValidateMethod("GetOwnRespondBloodQuery", parameters);
            return base.CreateQuery<RespondBlood>("GetOwnRespondBlood", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RespondBlood"/> с помощью запроса "GetRespondBlood".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RespondBlood"/>.</returns>
        public EntityQuery<RespondBlood> GetRespondBloodQuery()
        {
            this.ValidateMethod("GetRespondBloodQuery", null);
            return base.CreateQuery<RespondBlood>("GetRespondBlood", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RespondTransplantant"/> с помощью запроса "GetRespondTransplantant".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RespondTransplantant"/>.</returns>
        public EntityQuery<RespondTransplantant> GetRespondTransplantantQuery()
        {
            this.ValidateMethod("GetRespondTransplantantQuery", null);
            return base.CreateQuery<RespondTransplantant>("GetRespondTransplantant", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="TransactionInfo"/> с помощью запроса "GetTransactionInfo".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="TransactionInfo"/>.</returns>
        public EntityQuery<TransactionInfo> GetTransactionInfoQuery()
        {
            this.ValidateMethod("GetTransactionInfoQuery", null);
            return base.CreateQuery<TransactionInfo>("GetTransactionInfo", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Transplantant"/> с помощью запроса "GetTransplantant".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Transplantant"/>.</returns>
        public EntityQuery<Transplantant> GetTransplantantQuery()
        {
            this.ValidateMethod("GetTransplantantQuery", null);
            return base.CreateQuery<Transplantant>("GetTransplantant", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RespondTransplantant"/> с помощью запроса "RespondGivenTransplantant".
        /// </summary>
        /// <param name="from">Значение параметра "from" для запроса.</param>
        /// <param name="to">Значение параметра "to" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RespondTransplantant"/>.</returns>
        public EntityQuery<RespondTransplantant> RespondGivenTransplantantQuery(DateTime from, DateTime to)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            this.ValidateMethod("RespondGivenTransplantantQuery", parameters);
            return base.CreateQuery<RespondTransplantant>("RespondGivenTransplantant", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RespondTransplantant"/> с помощью запроса "RespondOwnTransplantant".
        /// </summary>
        /// <param name="ClinicId">Значение параметра "ClinicId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RespondTransplantant"/>.</returns>
        public EntityQuery<RespondTransplantant> RespondOwnTransplantantQuery(int ClinicId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ClinicId", ClinicId);
            this.ValidateMethod("RespondOwnTransplantantQuery", parameters);
            return base.CreateQuery<RespondTransplantant>("RespondOwnTransplantant", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DonorBankDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "DonorBankDomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDonorBankDomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetAvalibleTransplantants".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetAvalibleTransplantantsDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetAvalibleTransplantants", ReplyAction="http://tempuri.org/DonorBankDomainService/GetAvalibleTransplantantsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAvalibleTransplantants(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetAvalibleTransplantants".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetAvalibleTransplantants".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetAvalibleTransplantants".</returns>
            QueryResult<Transplantant> EndGetAvalibleTransplantants(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetBlood".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetBloodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetBlood", ReplyAction="http://tempuri.org/DonorBankDomainService/GetBloodResponse")]
            [WebGet()]
            IAsyncResult BeginGetBlood(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetBlood".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetBlood".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetBlood".</returns>
            QueryResult<Blood> EndGetBlood(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetClinic".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetClinicDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetClinic", ReplyAction="http://tempuri.org/DonorBankDomainService/GetClinicResponse")]
            [WebGet()]
            IAsyncResult BeginGetClinic(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetClinic".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetClinic".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetClinic".</returns>
            QueryResult<Clinic> EndGetClinic(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetClinicByUserName".
            /// </summary>
            /// <param name="UserName">Значение параметра "UserName" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetClinicByUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetClinicByUserName", ReplyAction="http://tempuri.org/DonorBankDomainService/GetClinicByUserNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetClinicByUserName(string UserName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetClinicByUserName".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetClinicByUserName".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetClinicByUserName".</returns>
            QueryResult<Clinic> EndGetClinicByUserName(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetDonor".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetDonorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetDonor", ReplyAction="http://tempuri.org/DonorBankDomainService/GetDonorResponse")]
            [WebGet()]
            IAsyncResult BeginGetDonor(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetDonor".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetDonor".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetDonor".</returns>
            QueryResult<Donor> EndGetDonor(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetDonorByPassport".
            /// </summary>
            /// <param name="Series">Значение параметра "Series" для данного действия.</param>
            /// <param name="Number">Значение параметра "Number" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetDonorByPassportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetDonorByPassport", ReplyAction="http://tempuri.org/DonorBankDomainService/GetDonorByPassportResponse")]
            [WebGet()]
            IAsyncResult BeginGetDonorByPassport(string Series, int Number, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetDonorByPassport".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetDonorByPassport".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetDonorByPassport".</returns>
            QueryResult<Donor> EndGetDonorByPassport(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetOwnRespondBlood".
            /// </summary>
            /// <param name="ClinicId">Значение параметра "ClinicId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetOwnRespondBloodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetOwnRespondBlood", ReplyAction="http://tempuri.org/DonorBankDomainService/GetOwnRespondBloodResponse")]
            [WebGet()]
            IAsyncResult BeginGetOwnRespondBlood(int ClinicId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetOwnRespondBlood".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetOwnRespondBlood".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetOwnRespondBlood".</returns>
            QueryResult<RespondBlood> EndGetOwnRespondBlood(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetRespondBlood".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetRespondBloodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetRespondBlood", ReplyAction="http://tempuri.org/DonorBankDomainService/GetRespondBloodResponse")]
            [WebGet()]
            IAsyncResult BeginGetRespondBlood(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetRespondBlood".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetRespondBlood".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetRespondBlood".</returns>
            QueryResult<RespondBlood> EndGetRespondBlood(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetRespondTransplantant".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetRespondTransplantantDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetRespondTransplantant", ReplyAction="http://tempuri.org/DonorBankDomainService/GetRespondTransplantantResponse")]
            [WebGet()]
            IAsyncResult BeginGetRespondTransplantant(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetRespondTransplantant".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetRespondTransplantant".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetRespondTransplantant".</returns>
            QueryResult<RespondTransplantant> EndGetRespondTransplantant(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetTransactionInfo".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetTransactionInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetTransactionInfo", ReplyAction="http://tempuri.org/DonorBankDomainService/GetTransactionInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransactionInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetTransactionInfo".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetTransactionInfo".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetTransactionInfo".</returns>
            QueryResult<TransactionInfo> EndGetTransactionInfo(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetTransplantant".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/GetTransplantantDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/GetTransplantant", ReplyAction="http://tempuri.org/DonorBankDomainService/GetTransplantantResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransplantant(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetTransplantant".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetTransplantant".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetTransplantant".</returns>
            QueryResult<Transplantant> EndGetTransplantant(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "RespondGivenTransplantant".
            /// </summary>
            /// <param name="from">Значение параметра "from" для данного действия.</param>
            /// <param name="to">Значение параметра "to" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/RespondGivenTransplantantDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/RespondGivenTransplantant", ReplyAction="http://tempuri.org/DonorBankDomainService/RespondGivenTransplantantResponse")]
            [WebGet()]
            IAsyncResult BeginRespondGivenTransplantant(DateTime from, DateTime to, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginRespondGivenTransplantant".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginRespondGivenTransplantant".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "RespondGivenTransplantant".</returns>
            QueryResult<RespondTransplantant> EndRespondGivenTransplantant(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "RespondOwnTransplantant".
            /// </summary>
            /// <param name="ClinicId">Значение параметра "ClinicId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/RespondOwnTransplantantDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/RespondOwnTransplantant", ReplyAction="http://tempuri.org/DonorBankDomainService/RespondOwnTransplantantResponse")]
            [WebGet()]
            IAsyncResult BeginRespondOwnTransplantant(int ClinicId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginRespondOwnTransplantant".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginRespondOwnTransplantant".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "RespondOwnTransplantant".</returns>
            QueryResult<RespondTransplantant> EndRespondOwnTransplantant(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DonorBankDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DonorBankDomainService/SubmitChanges", ReplyAction="http://tempuri.org/DonorBankDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DonorBankDomainContextEntityContainer : EntityContainer
        {
            
            public DonorBankDomainContextEntityContainer()
            {
                this.CreateEntitySet<Blood>(EntitySetOperations.All);
                this.CreateEntitySet<Clinic>(EntitySetOperations.All);
                this.CreateEntitySet<Donor>(EntitySetOperations.All);
                this.CreateEntitySet<RespondBlood>(EntitySetOperations.All);
                this.CreateEntitySet<RespondTransplantant>(EntitySetOperations.All);
                this.CreateEntitySet<TransactionInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Transplantant>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Класс "RegistrationData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RegistrationData"/>.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Answer".
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Email".
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FriendlyName".
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Question".
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserName".
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Класс сущности "RespondBlood".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class RespondBlood : Entity
    {
        
        private string _blood;
        
        private EntityRef<Clinic> _clinic;
        
        private int _count;
        
        private int _id;
        
        private int _idClinic;
        
        private string _purpose;
        
        private string _status;
        
        private DateTime _timeCreate;
        
        private DateTime _waitTime;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnBloodChanging(string value);
        partial void OnBloodChanged();
        partial void OnCountChanging(int value);
        partial void OnCountChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdClinicChanging(int value);
        partial void OnIdClinicChanged();
        partial void OnPurposeChanging(string value);
        partial void OnPurposeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTimeCreateChanging(DateTime value);
        partial void OnTimeCreateChanged();
        partial void OnWaitTimeChanging(DateTime value);
        partial void OnWaitTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RespondBlood"/>.
        /// </summary>
        public RespondBlood()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Blood".
        /// </summary>
        [DataMember()]
        [Display(Name="Группа крови", Order=2)]
        [Required()]
        [StringLength(10)]
        public string Blood
        {
            get
            {
                return this._blood;
            }
            set
            {
                if ((this._blood != value))
                {
                    this.OnBloodChanging(value);
                    this.RaiseDataMemberChanging("Blood");
                    this.ValidateProperty("Blood", value);
                    this._blood = value;
                    this.RaiseDataMemberChanged("Blood");
                    this.OnBloodChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает связанную сущность <see cref="Clinic"/>.
        /// </summary>
        [Association("Clinic_RespondBlood", "IdClinic", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Clinic Clinic
        {
            get
            {
                if ((this._clinic == null))
                {
                    this._clinic = new EntityRef<Clinic>(this, "Clinic", this.FilterClinic);
                }
                return this._clinic.Entity;
            }
            set
            {
                Clinic previous = this.Clinic;
                if ((previous != value))
                {
                    this.ValidateProperty("Clinic", value);
                    if ((previous != null))
                    {
                        this._clinic.Entity = null;
                        previous.RespondBlood.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdClinic = value.Id;
                    }
                    else
                    {
                        this.IdClinic = default(int);
                    }
                    this._clinic.Entity = value;
                    if ((value != null))
                    {
                        value.RespondBlood.Add(this);
                    }
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Count".
        /// </summary>
        [DataMember()]
        [Display(Name="Кол-во", Order=0)]
        public int Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((this._count != value))
                {
                    this.OnCountChanging(value);
                    this.RaiseDataMemberChanging("Count");
                    this.ValidateProperty("Count", value);
                    this._count = value;
                    this.RaiseDataMemberChanged("Count");
                    this.OnCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IdClinic".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public int IdClinic
        {
            get
            {
                return this._idClinic;
            }
            set
            {
                if ((this._idClinic != value))
                {
                    this.OnIdClinicChanging(value);
                    this.RaiseDataMemberChanging("IdClinic");
                    this.ValidateProperty("IdClinic", value);
                    this._idClinic = value;
                    this.RaiseDataMemberChanged("IdClinic");
                    this.OnIdClinicChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Purpose".
        /// </summary>
        [DataMember()]
        [Display(Name="Назначение", Order=2)]
        [Required()]
        [StringLength(50)]
        public string Purpose
        {
            get
            {
                return this._purpose;
            }
            set
            {
                if ((this._purpose != value))
                {
                    this.OnPurposeChanging(value);
                    this.RaiseDataMemberChanging("Purpose");
                    this.ValidateProperty("Purpose", value);
                    this._purpose = value;
                    this.RaiseDataMemberChanged("Purpose");
                    this.OnPurposeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Status".
        /// </summary>
        [DataMember()]
        [Display(Name="Статус", Order=1)]
        [Required()]
        [StringLength(15)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeCreate".
        /// </summary>
        [DataMember()]
        [Display(Name="Время создания", Order=3)]
        public DateTime TimeCreate
        {
            get
            {
                return this._timeCreate;
            }
            set
            {
                if ((this._timeCreate != value))
                {
                    this.OnTimeCreateChanging(value);
                    this.RaiseDataMemberChanging("TimeCreate");
                    this.ValidateProperty("TimeCreate", value);
                    this._timeCreate = value;
                    this.RaiseDataMemberChanged("TimeCreate");
                    this.OnTimeCreateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "WaitTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Время ожидания", Order=4)]
        public DateTime WaitTime
        {
            get
            {
                return this._waitTime;
            }
            set
            {
                if ((this._waitTime != value))
                {
                    this.OnWaitTimeChanging(value);
                    this.RaiseDataMemberChanging("WaitTime");
                    this.ValidateProperty("WaitTime", value);
                    this._waitTime = value;
                    this.RaiseDataMemberChanged("WaitTime");
                    this.OnWaitTimeChanged();
                }
            }
        }
        
        private bool FilterClinic(Clinic entity)
        {
            return (entity.Id == this.IdClinic);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "RespondTransplantant".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class RespondTransplantant : Entity
    {
        
        private EntityRef<Clinic> _clinic;
        
        private DateTime _createTime;
        
        private string _factor1;
        
        private string _factor2;
        
        private string _factor3;
        
        private string _factor4;
        
        private string _factor5;
        
        private string _factor6;
        
        private int _id;
        
        private int _idClinic;
        
        private int _priority;
        
        private string _status;
        
        private int _type;
        
        private DateTime _waitTime;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnFactor1Changing(string value);
        partial void OnFactor1Changed();
        partial void OnFactor2Changing(string value);
        partial void OnFactor2Changed();
        partial void OnFactor3Changing(string value);
        partial void OnFactor3Changed();
        partial void OnFactor4Changing(string value);
        partial void OnFactor4Changed();
        partial void OnFactor5Changing(string value);
        partial void OnFactor5Changed();
        partial void OnFactor6Changing(string value);
        partial void OnFactor6Changed();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdClinicChanging(int value);
        partial void OnIdClinicChanged();
        partial void OnPriorityChanging(int value);
        partial void OnPriorityChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnWaitTimeChanging(DateTime value);
        partial void OnWaitTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RespondTransplantant"/>.
        /// </summary>
        public RespondTransplantant()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает связанную сущность <see cref="Clinic"/>.
        /// </summary>
        [Association("Clinic_RespondTransplantant", "IdClinic", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Clinic Clinic
        {
            get
            {
                if ((this._clinic == null))
                {
                    this._clinic = new EntityRef<Clinic>(this, "Clinic", this.FilterClinic);
                }
                return this._clinic.Entity;
            }
            set
            {
                Clinic previous = this.Clinic;
                if ((previous != value))
                {
                    this.ValidateProperty("Clinic", value);
                    if ((previous != null))
                    {
                        this._clinic.Entity = null;
                        previous.RespondTransplantant.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdClinic = value.Id;
                    }
                    else
                    {
                        this.IdClinic = default(int);
                    }
                    this._clinic.Entity = value;
                    if ((value != null))
                    {
                        value.RespondTransplantant.Add(this);
                    }
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CreateTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Дата создания", Order=9)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor1".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 1", Order=3)]
        [Required()]
        [StringLength(10)]
        public string Factor1
        {
            get
            {
                return this._factor1;
            }
            set
            {
                if ((this._factor1 != value))
                {
                    this.OnFactor1Changing(value);
                    this.RaiseDataMemberChanging("Factor1");
                    this.ValidateProperty("Factor1", value);
                    this._factor1 = value;
                    this.RaiseDataMemberChanged("Factor1");
                    this.OnFactor1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor2".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 2", Order=4)]
        [Required()]
        [StringLength(10)]
        public string Factor2
        {
            get
            {
                return this._factor2;
            }
            set
            {
                if ((this._factor2 != value))
                {
                    this.OnFactor2Changing(value);
                    this.RaiseDataMemberChanging("Factor2");
                    this.ValidateProperty("Factor2", value);
                    this._factor2 = value;
                    this.RaiseDataMemberChanged("Factor2");
                    this.OnFactor2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor3".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 3", Order=5)]
        [Required()]
        [StringLength(10)]
        public string Factor3
        {
            get
            {
                return this._factor3;
            }
            set
            {
                if ((this._factor3 != value))
                {
                    this.OnFactor3Changing(value);
                    this.RaiseDataMemberChanging("Factor3");
                    this.ValidateProperty("Factor3", value);
                    this._factor3 = value;
                    this.RaiseDataMemberChanged("Factor3");
                    this.OnFactor3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor4".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 4", Order=6)]
        [Required()]
        [StringLength(10)]
        public string Factor4
        {
            get
            {
                return this._factor4;
            }
            set
            {
                if ((this._factor4 != value))
                {
                    this.OnFactor4Changing(value);
                    this.RaiseDataMemberChanging("Factor4");
                    this.ValidateProperty("Factor4", value);
                    this._factor4 = value;
                    this.RaiseDataMemberChanged("Factor4");
                    this.OnFactor4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor5".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 5", Order=7)]
        [Required()]
        [StringLength(10)]
        public string Factor5
        {
            get
            {
                return this._factor5;
            }
            set
            {
                if ((this._factor5 != value))
                {
                    this.OnFactor5Changing(value);
                    this.RaiseDataMemberChanging("Factor5");
                    this.ValidateProperty("Factor5", value);
                    this._factor5 = value;
                    this.RaiseDataMemberChanged("Factor5");
                    this.OnFactor5Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor6".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 6", Order=8)]
        [Required()]
        [StringLength(10)]
        public string Factor6
        {
            get
            {
                return this._factor6;
            }
            set
            {
                if ((this._factor6 != value))
                {
                    this.OnFactor6Changing(value);
                    this.RaiseDataMemberChanging("Factor6");
                    this.ValidateProperty("Factor6", value);
                    this._factor6 = value;
                    this.RaiseDataMemberChanged("Factor6");
                    this.OnFactor6Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IdClinic".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public int IdClinic
        {
            get
            {
                return this._idClinic;
            }
            set
            {
                if ((this._idClinic != value))
                {
                    this.OnIdClinicChanging(value);
                    this.RaiseDataMemberChanging("IdClinic");
                    this.ValidateProperty("IdClinic", value);
                    this._idClinic = value;
                    this.RaiseDataMemberChanged("IdClinic");
                    this.OnIdClinicChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Priority".
        /// </summary>
        [DataMember()]
        [Display(Name="Приоритет", Order=2)]
        public int Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Status".
        /// </summary>
        [DataMember()]
        [Display(Name="Статус", Order=1)]
        [Required()]
        [StringLength(15)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Type".
        /// </summary>
        [DataMember()]
        [Display(Name="Тип", Order=0)]
        public int Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "WaitTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Время ожидания", Order=10)]
        public DateTime WaitTime
        {
            get
            {
                return this._waitTime;
            }
            set
            {
                if ((this._waitTime != value))
                {
                    this.OnWaitTimeChanging(value);
                    this.RaiseDataMemberChanging("WaitTime");
                    this.ValidateProperty("WaitTime", value);
                    this._waitTime = value;
                    this.RaiseDataMemberChanged("WaitTime");
                    this.OnWaitTimeChanged();
                }
            }
        }
        
        private bool FilterClinic(Clinic entity)
        {
            return (entity.Id == this.IdClinic);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "TransactionInfo".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class TransactionInfo : Entity
    {
        
        private string _about;
        
        private int _id;
        
        private DateTime _timeDate;
        
        private string _type;
        
        private string _user;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAboutChanging(string value);
        partial void OnAboutChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTimeDateChanging(DateTime value);
        partial void OnTimeDateChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnUserChanging(string value);
        partial void OnUserChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="TransactionInfo"/>.
        /// </summary>
        public TransactionInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "About".
        /// </summary>
        [DataMember()]
        [Display(Name="Примечание", Order=3)]
        [Required()]
        public string About
        {
            get
            {
                return this._about;
            }
            set
            {
                if ((this._about != value))
                {
                    this.OnAboutChanging(value);
                    this.RaiseDataMemberChanging("About");
                    this.ValidateProperty("About", value);
                    this._about = value;
                    this.RaiseDataMemberChanged("About");
                    this.OnAboutChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TimeDate".
        /// </summary>
        [DataMember()]
        [Display(Name="Дата/Время", Order=0)]
        public DateTime TimeDate
        {
            get
            {
                return this._timeDate;
            }
            set
            {
                if ((this._timeDate != value))
                {
                    this.OnTimeDateChanging(value);
                    this.RaiseDataMemberChanging("TimeDate");
                    this.ValidateProperty("TimeDate", value);
                    this._timeDate = value;
                    this.RaiseDataMemberChanged("TimeDate");
                    this.OnTimeDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Type".
        /// </summary>
        [DataMember()]
        [Display(Name="Тип", Order=1)]
        [Required()]
        [StringLength(20)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "User".
        /// </summary>
        [DataMember()]
        [Display(Name="Пользователь", Order=2)]
        [Required()]
        [StringLength(50)]
        public string User
        {
            get
            {
                return this._user;
            }
            set
            {
                if ((this._user != value))
                {
                    this.OnUserChanging(value);
                    this.RaiseDataMemberChanging("User");
                    this.ValidateProperty("User", value);
                    this._user = value;
                    this.RaiseDataMemberChanged("User");
                    this.OnUserChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "Transplantant".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class Transplantant : Entity
    {
        
        private EntityRef<Donor> _donor;
        
        private string _factor1;
        
        private string _factor2;
        
        private string _factor3;
        
        private string _factor4;
        
        private string _factor5;
        
        private string _factor6;
        
        private int _id;
        
        private int _idDonor;
        
        private DateTime _storageTime;
        
        private string _type;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnFactor1Changing(string value);
        partial void OnFactor1Changed();
        partial void OnFactor2Changing(string value);
        partial void OnFactor2Changed();
        partial void OnFactor3Changing(string value);
        partial void OnFactor3Changed();
        partial void OnFactor4Changing(string value);
        partial void OnFactor4Changed();
        partial void OnFactor5Changing(string value);
        partial void OnFactor5Changed();
        partial void OnFactor6Changing(string value);
        partial void OnFactor6Changed();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdDonorChanging(int value);
        partial void OnIdDonorChanged();
        partial void OnStorageTimeChanging(DateTime value);
        partial void OnStorageTimeChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Transplantant"/>.
        /// </summary>
        public Transplantant()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает связанную сущность <see cref="Donor"/>.
        /// </summary>
        [Association("Donor_Transplantant", "IdDonor", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Donor Donor
        {
            get
            {
                if ((this._donor == null))
                {
                    this._donor = new EntityRef<Donor>(this, "Donor", this.FilterDonor);
                }
                return this._donor.Entity;
            }
            set
            {
                Donor previous = this.Donor;
                if ((previous != value))
                {
                    this.ValidateProperty("Donor", value);
                    if ((previous != null))
                    {
                        this._donor.Entity = null;
                        previous.Transplantant.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdDonor = value.Id;
                    }
                    else
                    {
                        this.IdDonor = default(int);
                    }
                    this._donor.Entity = value;
                    if ((value != null))
                    {
                        value.Transplantant.Add(this);
                    }
                    this.RaisePropertyChanged("Donor");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor1".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 1", Order=2)]
        [Required()]
        [StringLength(10)]
        public string Factor1
        {
            get
            {
                return this._factor1;
            }
            set
            {
                if ((this._factor1 != value))
                {
                    this.OnFactor1Changing(value);
                    this.RaiseDataMemberChanging("Factor1");
                    this.ValidateProperty("Factor1", value);
                    this._factor1 = value;
                    this.RaiseDataMemberChanged("Factor1");
                    this.OnFactor1Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor2".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 2", Order=3)]
        [Required()]
        [StringLength(10)]
        public string Factor2
        {
            get
            {
                return this._factor2;
            }
            set
            {
                if ((this._factor2 != value))
                {
                    this.OnFactor2Changing(value);
                    this.RaiseDataMemberChanging("Factor2");
                    this.ValidateProperty("Factor2", value);
                    this._factor2 = value;
                    this.RaiseDataMemberChanged("Factor2");
                    this.OnFactor2Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor3".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 3", Order=4)]
        [Required()]
        [StringLength(10)]
        public string Factor3
        {
            get
            {
                return this._factor3;
            }
            set
            {
                if ((this._factor3 != value))
                {
                    this.OnFactor3Changing(value);
                    this.RaiseDataMemberChanging("Factor3");
                    this.ValidateProperty("Factor3", value);
                    this._factor3 = value;
                    this.RaiseDataMemberChanged("Factor3");
                    this.OnFactor3Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor4".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 4", Order=5)]
        [Required()]
        [StringLength(10)]
        public string Factor4
        {
            get
            {
                return this._factor4;
            }
            set
            {
                if ((this._factor4 != value))
                {
                    this.OnFactor4Changing(value);
                    this.RaiseDataMemberChanging("Factor4");
                    this.ValidateProperty("Factor4", value);
                    this._factor4 = value;
                    this.RaiseDataMemberChanged("Factor4");
                    this.OnFactor4Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor5".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 5", Order=6)]
        [Required()]
        [StringLength(10)]
        public string Factor5
        {
            get
            {
                return this._factor5;
            }
            set
            {
                if ((this._factor5 != value))
                {
                    this.OnFactor5Changing(value);
                    this.RaiseDataMemberChanging("Factor5");
                    this.ValidateProperty("Factor5", value);
                    this._factor5 = value;
                    this.RaiseDataMemberChanged("Factor5");
                    this.OnFactor5Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Factor6".
        /// </summary>
        [DataMember()]
        [Display(Name="Фактор 6", Order=7)]
        [Required()]
        [StringLength(10)]
        public string Factor6
        {
            get
            {
                return this._factor6;
            }
            set
            {
                if ((this._factor6 != value))
                {
                    this.OnFactor6Changing(value);
                    this.RaiseDataMemberChanging("Factor6");
                    this.ValidateProperty("Factor6", value);
                    this._factor6 = value;
                    this.RaiseDataMemberChanged("Factor6");
                    this.OnFactor6Changed();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IdDonor".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public int IdDonor
        {
            get
            {
                return this._idDonor;
            }
            set
            {
                if ((this._idDonor != value))
                {
                    this.OnIdDonorChanging(value);
                    this.RaiseDataMemberChanging("IdDonor");
                    this.ValidateProperty("IdDonor", value);
                    this._idDonor = value;
                    this.RaiseDataMemberChanged("IdDonor");
                    this.OnIdDonorChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StorageTime".
        /// </summary>
        [DataMember()]
        [Display(Name="Хранить до", Order=1)]
        public DateTime StorageTime
        {
            get
            {
                return this._storageTime;
            }
            set
            {
                if ((this._storageTime != value))
                {
                    this.OnStorageTimeChanging(value);
                    this.RaiseDataMemberChanging("StorageTime");
                    this.ValidateProperty("StorageTime", value);
                    this._storageTime = value;
                    this.RaiseDataMemberChanged("StorageTime");
                    this.OnStorageTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Type".
        /// </summary>
        [DataMember()]
        [Display(Name="Тип", Order=0)]
        [Required()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterDonor(Donor entity)
        {
            return (entity.Id == this.IdDonor);
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "User".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DonorBank.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private int _clinicId;
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnClinicIdChanging(int value);
        partial void OnClinicIdChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ClinicId".
        /// </summary>
        [DataMember()]
        public int ClinicId
        {
            get
            {
                return this._clinicId;
            }
            set
            {
                if ((this._clinicId != value))
                {
                    this.OnClinicIdChanging(value);
                    this.RaiseDataMemberChanging("ClinicId");
                    this.ValidateProperty("ClinicId", value);
                    this._clinicId = value;
                    this.RaiseDataMemberChanged("ClinicId");
                    this.OnClinicIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FriendlyName".
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Roles".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, проверена ли подлинность пользователя.
        /// </summary>
        /// <remarks>
        /// Это значение равно <c>true</c>, если <see cref="Name"/> не является пустым значением и не равно <c>null</c>.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, имеет ли участник данную роль.
        /// </summary>
        /// <remarks>
        /// Возвращает значение, указывающее, содержится ли указанная роль в списке ролей.
        /// Эта функция учитывает регистр символов.
        /// </remarks>
        /// <param name="role">Имя роли, членство в которой проверяется.</param>
        /// <returns>Возвращает значение, указывающее, имеет ли участник данную роль.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "UserRegistrationService" DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="UserRegistrationContext"/>.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("DonorBank-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserRegistrationContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы UserRegistrationService.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserRegistrationContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "CreateUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "CreateUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "UserRegistrationService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "CreateUser".
            /// </summary>
            /// <param name="user">Значение параметра "user" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginCreateUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginCreateUser".</param>
            /// <returns>Объект "CreateUserStatus", возвращенный из операции "CreateUser".</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
